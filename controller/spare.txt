const express = require('express');
const router = express.Router();
const Product = require('../models/product');
const auth = require('../middleware/auth');

// Create a new product
router.post('/products', auth, async (req, res) => {
 try {
 const product = new Product(req.body);
 await product.save();
 res.status(201).send(product);
 } catch (error) {
 res.status(400).send(error);
 }
});

// Get all products
router.get('/products', auth, async (req, res) => {
 try {
 const products = await Product.find();
 res.status(200).send(products);
 } catch (error) {
 res.status(500).send(error);
 }
});

// Get a product by ID
router.get('/products/:id', auth, async (req, res) => {
 try {
 const product = await Product.findById(req.params.id);
 if (!product) {
 return res.status(404).send();
 }
 res.status(200).send(product);
 } catch (error) {
 res.status(500).send(error);
 }
});

// Update a product by ID
router.put('/products/:id', auth, async (req, res) => {
 try {
 const product = await Product.findByIdAndUpdate(req.params.id, req.body, { new: true, runValidators: true });
 if (!product) {
 return res.status(404).send();
 }
 res.status(200).send(product);
 } catch (error) {
 res.status(400).send(error);
 }
});

// Delete a product by ID
router.delete('/products/:id', auth, async (req, res) => {
 try {
 const product = await Product.findByIdAndDelete(req.params.id);
 if (!product) {
 return res.status(404).send();
 }
 res.status(200).send(product);
 } catch (error) {
 res.status(500).send(error);
 }
});

module.exports = router;




result = {
            message: "Login Succesfull",
            success: true,
            token: newtoken,
            id: _id,
            userName: username,
        };


        const jwt = require('jsonwebtoken');

 const authorise = (req, res, next) => {
 const token = req.header('Authorization'); ['Bearer','lkjhn,o986gfvbk']
const bearerWord = (token.split("")[0].trim());
const bearerToken = token.split("")[1];
if (!bearerWord = "Bearer") {
    return res.status(403).json({ message: 'Invalid Header'});
}
if (!bearerToken){
    return res.status(401).json({ message: 'No token, authorization denied'});
}
try{
    const decoded =jwt.verify(bearerToken,'wisdom');
 req.user = decoded.userId;
 next();
 } catch (error) {
 res.status(401).json({messsage: 'Token is not valid' });
 }
};
module.exports = authorise;